// Generated by CoffeeScript 1.6.2
(function() {
  var Curve, Point, Scene, Style;

  Point = (function() {
    function Point(x, y, z) {
      this.x = x;
      this.y = y;
      this.z = z;
    }

    return Point;

  })();

  Style = (function() {
    function Style() {}

    Style.fillStyle = "";

    Style.strokeStyle = "black";

    Style.lineWidth = "";

    Style.lineCap = "";

    Style.lineJoin = "";

    Style.prototype._pstyle = function(r, g, b, a) {
      if (typeof r === "String" && r.match(/#[0-9a-fA-F]{3}|#[0-9a-fA-F]{6}/)) {
        return r;
      } else if (typeof r === "number" && !a) {
        return "rgb(" + r + "," + g + "," + b + ")";
      } else {
        return "rgba(" + r + "," + g + "," + b + "," + a + ")";
      }
    };

    Style.prototype.fillStyle = function(r, g, b, a) {
      return this.fillStyle = this._pstyle(r, g, b, a);
    };

    Style.strokeStyle = function(r, g, b, a) {
      return this.strokeStyle = this._pstyle(r, g, b, a);
    };

    return Style;

  })();

  Curve = (function() {
    function Curve(points) {
      this.points = points != null ? points : [];
      this.cursor = 0;
    }

    Curve.prototype.get = function(cur) {
      if (cur && cur < this.points.length) {
        return this.points[cur];
      } else {
        return this.points[this.cursor];
      }
    };

    Curve.prototype.next = function() {
      if (this.cursor < this.points.length && this.cursor >= 0) {
        return this.points[this.cursor];
      } else {
        return null;
      }
    };

    Curve.prototype.cursor = function(cur) {
      if (cur && cur < this.points.length && cur >= 0) {
        this.cursor = cur;
      }
      return this.cursor;
    };

    Curve.prototype.end = function() {
      return this.cursor = this.points.length;
    };

    Curve.prototype.rewind = function() {
      return this.cursor = 0;
    };

    Curve.prototype.length = function() {
      return this.points.length;
    };

    Curve.prototype.first = function() {
      return this.points[0];
    };

    Curve.prototype.last = function() {
      return this.points[this.points.length - 1];
    };

    Curve.prototype.style = function(style) {
      if (style instanceof Style) {
        return this.style = style;
      } else {
        throw "Type Error: argument 'style' must be an instance of Style";
      }
    };

    return Curve;

  })();

  Scene = (function() {
    function Scene(id) {
      this.canvas = document.getElementById(id);
      if (this.canvas.getContext) {
        this.ctx = getContext("2d");
        this.curves = [];
      } else {
        throw "Can not get context, browser do not support html5 canvas";
      }
    }

    Scene.prototype.addCurve = function(curve) {
      if (curve instanceof Curve) {
        return this.curves.push(curve);
      } else {
        throw "Type Error argument 'curve' must be an instance of Curve";
      }
    };

    Scene.prototype.drawCurve = function(curve) {
      return curve;
    };

    Scene.prototype.render = function() {
      var curve, _i, _len, _ref, _results;

      _ref = this.curves;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        curve = _ref[_i];
        _results.push(this.drawCurve(curve));
      }
      return _results;
    };

    return Scene;

  })();

}).call(this);

/*
//@ sourceMappingURL=scene.map
*/
